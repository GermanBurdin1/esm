# Script de d√©ploiement PowerShell pour EMS
# Usage: .\deploy.ps1 [--build] [--clean] [--logs]

param(
    [switch]$Build,
    [switch]$Clean,
    [switch]$Logs,
    [switch]$Help
)

Write-Host "üê≥ EMS Deployment Script" -ForegroundColor Cyan
Write-Host "=========================" -ForegroundColor Cyan

if ($Help) {
    Write-Host "Usage: .\deploy.ps1 [options]"
    Write-Host ""
    Write-Host "Options:"
    Write-Host "  --build    Force rebuild des images Docker"
    Write-Host "  --clean    Nettoie les conteneurs et volumes existants"
    Write-Host "  --logs     Affiche les logs apr√®s d√©marrage"
    Write-Host "  --help     Affiche cette aide"
    Write-Host ""
    Write-Host "Exemples:"
    Write-Host "  .\deploy.ps1                   # D√©marrage simple"
    Write-Host "  .\deploy.ps1 --build           # Rebuild et d√©marrage"
    Write-Host "  .\deploy.ps1 --clean --build   # Clean complet puis build"
    exit 0
}

try {
    # V√©rification que Docker est disponible
    Write-Host "üîç V√©rification de Docker..." -ForegroundColor Yellow
    docker --version | Out-Null
    if ($LASTEXITCODE -ne 0) {
        throw "Docker n'est pas disponible. Veuillez installer Docker."
    }
    Write-Host "‚úÖ Docker est disponible" -ForegroundColor Green

    # Clean si demand√©
    if ($Clean) {
        Write-Host "üßπ Nettoyage des conteneurs existants..." -ForegroundColor Yellow
        docker-compose down -v --remove-orphans
        docker system prune -f
        Write-Host "‚úÖ Nettoyage termin√©" -ForegroundColor Green
    }

    # Build des images
    if ($Build) {
        Write-Host "üî® Construction des images Docker..." -ForegroundColor Yellow
        docker-compose build --no-cache
        if ($LASTEXITCODE -ne 0) {
            throw "Erreur lors de la construction des images"
        }
        Write-Host "‚úÖ Images construites avec succ√®s" -ForegroundColor Green
    }

    # D√©marrage des services
    Write-Host "üöÄ D√©marrage des services..." -ForegroundColor Yellow
    docker-compose up -d
    if ($LASTEXITCODE -ne 0) {
        throw "Erreur lors du d√©marrage des services"
    }

    # Attente que les services soient pr√™ts
    Write-Host "‚è≥ Attente du d√©marrage complet..." -ForegroundColor Yellow
    Start-Sleep -Seconds 30

    # V√©rification des services
    Write-Host "üîç V√©rification des services..." -ForegroundColor Yellow
    $containers = docker-compose ps --services --filter "status=running"
    
    Write-Host ""
    Write-Host "üìä Status des services:" -ForegroundColor Cyan
    docker-compose ps

    Write-Host ""
    Write-Host "üåê URLs disponibles:" -ForegroundColor Cyan
    Write-Host "  ‚Ä¢ Application Backend: http://localhost:8080" -ForegroundColor White
    Write-Host "  ‚Ä¢ API Documentation:   http://localhost:8080/swagger-ui.html" -ForegroundColor White
    Write-Host "  ‚Ä¢ Health Check:        http://localhost:8080/api/public/health" -ForegroundColor White
    Write-Host "  ‚Ä¢ Base de donn√©es:     localhost:5432 (postgres/postgre)" -ForegroundColor White

    if ($Logs) {
        Write-Host ""
        Write-Host "üìù Logs des services..." -ForegroundColor Yellow
        docker-compose logs -f
    } else {
        Write-Host ""
        Write-Host "üí° Pour voir les logs: docker-compose logs -f" -ForegroundColor Yellow
        Write-Host "üí° Pour arr√™ter:       docker-compose down" -ForegroundColor Yellow
    }

    Write-Host ""
    Write-Host "üéâ D√©ploiement r√©ussi!" -ForegroundColor Green

} catch {
    Write-Host ""
    Write-Host "‚ùå Erreur: $_" -ForegroundColor Red
    Write-Host "üí° Consultez les logs: docker-compose logs" -ForegroundColor Yellow
    exit 1
}