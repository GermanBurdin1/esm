# üß™ PowerShell Script –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç—ã –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

Write-Host "üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤..." -ForegroundColor Green
Write-Host "üîó –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:8080" -ForegroundColor Yellow
Write-Host ""

$baseUrl = "http://localhost:8080"

# 1. Health Check
Write-Host "1. üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ Health Check..." -ForegroundColor Cyan
try {
    $healthResponse = Invoke-RestMethod -Uri "$baseUrl/api/public/health" -Method GET
    Write-Host "‚úÖ Health Check: $($healthResponse.status)" -ForegroundColor Green
    Write-Host "   Application: $($healthResponse.application)" -ForegroundColor Gray
    Write-Host "   Version: $($healthResponse.version)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Health Check failed: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!" -ForegroundColor Red
    exit 1
}

Write-Host ""

# 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User API
Write-Host "2. üë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User API..." -ForegroundColor Cyan

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
$newUser = @{
    username = "test_user_$(Get-Random)"
    email = "test$(Get-Random)@example.com"
    passwordHash = "password123"
    role = "USER"
} | ConvertTo-Json

try {
    $userResponse = Invoke-RestMethod -Uri "$baseUrl/api/users" -Method POST -Body $newUser -ContentType "application/json"
    $userId = $userResponse.id
    Write-Host "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: $userId" -ForegroundColor Green
    Write-Host "   Username: $($userResponse.username)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è failed: $($_.Exception.Message)" -ForegroundColor Red
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
try {
    $allUsers = Invoke-RestMethod -Uri "$baseUrl/api/users" -Method GET
    Write-Host "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $($allUsers.Count)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π failed: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Workspace API (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω)
if ($userId) {
    Write-Host "3. üè¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Workspace API..." -ForegroundColor Cyan
    
    $newWorkspace = @{
        name = "Test Workspace $(Get-Random)"
        description = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π workspace –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        ownerId = $userId
    } | ConvertTo-Json
    
    try {
        $workspaceResponse = Invoke-RestMethod -Uri "$baseUrl/api/workspaces" -Method POST -Body $newWorkspace -ContentType "application/json"
        $workspaceId = $workspaceResponse.id
        Write-Host "‚úÖ Workspace —Å–æ–∑–¥–∞–Ω —Å ID: $workspaceId" -ForegroundColor Green
        Write-Host "   Name: $($workspaceResponse.name)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ workspace failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host ""
}

# 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Board API (–µ—Å–ª–∏ workspace —Å–æ–∑–¥–∞–Ω)
if ($workspaceId) {
    Write-Host "4. üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Board API..." -ForegroundColor Cyan
    
    $newBoard = @{
        name = "Test Board $(Get-Random)"
        description = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –¥–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        workspaceId = $workspaceId
    } | ConvertTo-Json
    
    try {
        $boardResponse = Invoke-RestMethod -Uri "$baseUrl/api/boards" -Method POST -Body $newBoard -ContentType "application/json"
        $boardId = $boardResponse.id
        Write-Host "‚úÖ Board —Å–æ–∑–¥–∞–Ω–∞ —Å ID: $boardId" -ForegroundColor Green
        Write-Host "   Name: $($boardResponse.name)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ board failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host ""
}

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö GET —Ä–æ—É—Ç–æ–≤
Write-Host "5. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ GET —Ä–æ—É—Ç–æ–≤..." -ForegroundColor Cyan

$getRoutes = @(
    "/api/users",
    "/api/workspaces", 
    "/api/boards",
    "/api/tasks",
    "/api/comments",
    "/api/labels"
)

foreach ($route in $getRoutes) {
    try {
        $response = Invoke-RestMethod -Uri "$baseUrl$route" -Method GET
        $count = if ($response -is [array]) { $response.Count } else { 1 }
        Write-Host "‚úÖ $route - –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: $count" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå $route - Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

Write-Host ""

# 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
Write-Host "üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:" -ForegroundColor Yellow
Write-Host "   ‚Ä¢ Swagger UI: $baseUrl/swagger-ui.html" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Health Check: $baseUrl/api/public/health" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ API Docs: $baseUrl/api-docs" -ForegroundColor Cyan
Write-Host ""
Write-Host "üí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ Swagger UI –≤ –±—Ä–∞—É–∑–µ—Ä–µ!" -ForegroundColor Yellow